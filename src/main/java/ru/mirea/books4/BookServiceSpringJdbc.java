package ru.mirea.books4;

import org.springframework.dao.DataAccessException;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import ru.mirea.books4.nonspring.Book;
import ru.mirea.books4.nonspring.BookDetails;

import javax.sql.DataSource;
import java.util.List;
import java.util.Optional;

public class BookServiceSpringJdbc {

    private final JdbcTemplate jdbc;

    public BookServiceSpringJdbc(DataSource ds) {
        this.jdbc = new JdbcTemplate(ds);
    }

    public void init() {
        try {
            jdbc.execute(
                "CREATE TABLE books (" +
                "  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "  author VARCHAR(100) NOT NULL," +
                "  title VARCHAR(100) NOT NULL" +
                ")"
            );
        } catch (DataAccessException ex) {
            // ignore
        }
    }

    private static RowMapper<Book> getBookRowMapper() {
        return (rs, rowNum) -> new Book(rs.getInt(1), rs.getString(2), rs.getString(3));
    }

    public List<Book> getAllBooks() {
        return jdbc.query("select id, author, title from books", getBookRowMapper());
    }

    private static void checkDetails(BookDetails details) {
        if (details.getAuthor() == null)
            throw new IllegalArgumentException("No author");
        if (details.getTitle() == null)
            throw new IllegalArgumentException("No title");
    }

    public Optional<Book> getBook(int id) {
        List<Book> found = jdbc.query("select id, author, title from books where id = ?", getBookRowMapper(), id);
        Book book = DataAccessUtils.singleResult(found);
        return Optional.ofNullable(book);
    }

    public Book addBook(BookDetails details) {
        checkDetails(details);
        KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbc.update(
            con -> con.prepareStatement("insert into books (author, title) values (?, ?)", new String[] {"id"}),
            keyHolder
        );
        Integer id = keyHolder.getKeyAs(Integer.class);
        assert id != null;
        return new Book(id.intValue(), details.getAuthor(), details.getTitle());
    }

    public Optional<Book> updateBook(int id, BookDetails details) {
        checkDetails(details);
        int updated = jdbc.update(
            "update books set author = ?, title = ? where id = ?",
            details.getAuthor(), details.getTitle(), id
        );
        if (updated > 0) {
            return Optional.of(new Book(id, details.getAuthor(), details.getTitle()));
        } else {
            return Optional.empty();
        }
    }

    public boolean deleteBook(int id) {
        int deleted = jdbc.update("delete from books where id = ?", id);
        return deleted > 0;
    }
}
