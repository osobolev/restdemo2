package ru.mirea.books4.nonspring;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class BookRepository {

    private final DataSource ds;

    public BookRepository(DataSource ds) {
        this.ds = ds;
    }

    public void init() {
        try (Connection connection = ds.getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement(
                "CREATE TABLE books (" +
                "  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "  author VARCHAR(100) NOT NULL," +
                "  title VARCHAR(100) NOT NULL" +
                ")"
            )) {
                ps.execute();
            }
        } catch (SQLException ex) {
            // ignore
        }
    }

    public List<Book> getAllBooks() {
        try (Connection connection = ds.getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement("select id, author, title from books")) {
                try (ResultSet rs = ps.executeQuery()) {
                    List<Book> books = new ArrayList<>();
                    while (rs.next()) {
                        int id = rs.getInt(1);
                        String author = rs.getString(2);
                        String title = rs.getString(3);
                        books.add(new Book(id, author, title));
                    }
                    return books;
                }
            }
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    public Optional<Book> getBook(int bookId) {
        try (Connection connection = ds.getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement("select id, author, title from books where id = ?")) {
                ps.setInt(1, bookId);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        int id = rs.getInt(1);
                        String author = rs.getString(2);
                        String title = rs.getString(3);
                        return Optional.of(new Book(id, author, title));
                    } else {
                        return Optional.empty();
                    }
                }
            }
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    public Book addBook(BookDetails details) {
        try (Connection connection = ds.getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement("insert into books (author, title) values (?, ?)", new String[] {"id"})) {
                ps.setString(1, details.getAuthor());
                ps.setString(2, details.getTitle());
                ps.executeUpdate();
                int id;
                try (ResultSet rs = ps.getGeneratedKeys()) {
                    rs.next();
                    id = rs.getInt(1);
                }
                return new Book(id, details.getAuthor(), details.getTitle());
            }
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    public Optional<Book> updateBook(int id, BookDetails details) {
        try (Connection connection = ds.getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement("update books set author = ?, title = ? where id = ?")) {
                ps.setString(1, details.getAuthor());
                ps.setString(2, details.getTitle());
                ps.setInt(1, id);
                if (ps.executeUpdate() > 0) {
                    return Optional.of(new Book(id, details.getAuthor(), details.getTitle()));
                } else {
                    return Optional.empty();
                }
            }
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    public boolean deleteBook(int id) {
        try (Connection connection = ds.getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement("delete from books where id = ?")) {
                ps.setInt(1, id);
                return ps.executeUpdate() > 0;
            }
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }
}
